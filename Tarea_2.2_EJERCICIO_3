#           Autor:
#   María Alexandra Guardia Canche
#   alexandra.guardia.25@gmail.com
#   Versión 1.0 : 11/02/2025

# Importar las bibliotecas necesarias
import numpy as np  # Biblioteca para operaciones numéricas y funciones matemáticas
import matplotlib.pyplot as plt  # Biblioteca para graficar

# Definir la función g(x) utilizada en el método de punto fijo
def g(x):
    return np.cos(x)  # Se elige g(x) = cos(x)

# Definir la derivada de g(x) para analizar el criterio de convergencia
def g_prime(x):
    return -(np.sin(x))  # Derivada de cos(x) es -sin(x)

# Función para calcular el error absoluto entre dos valores consecutivos
def error_absoluto(x_new, x_old):
    return abs(x_new - x_old)

# Función para calcular el error relativo entre dos valores consecutivos
def error_relativo(x_new, x_old):
    return abs((x_new - x_old) / x_new)

# Función para calcular el error cuadrático entre dos valores consecutivos
def error_cuadratico(x_new, x_old):
    return (x_new - x_old)**2

# Implementación del método de punto fijo para encontrar una solución a g(x) = x
def punto_fijo(x0, tol=1e-5, max_iter=100):
    iteraciones = []  # Lista para almacenar las iteraciones
    errores_abs = []  # Lista para almacenar los errores absolutos
    errores_rel = []  # Lista para almacenar los errores relativos
    errores_cuad = []  # Lista para almacenar los errores cuadráticos

    x_old = x0  # Valor inicial dado por el usuario
    for i in range(max_iter):  # Iterar hasta el número máximo de iteraciones
        x_new = g(x_old)  # Calcular el nuevo valor aplicando g(x)
        e_abs = error_absoluto(x_new, x_old)  # Calcular error absoluto
        e_rel = error_relativo(x_new, x_old)  # Calcular error relativo
        e_cuad = error_cuadratico(x_new, x_old)  # Calcular error cuadrático

        # Almacenar los valores de la iteración actual
        iteraciones.append((i+1, x_new, e_abs, e_rel, e_cuad))
        errores_abs.append(e_abs)
        errores_rel.append(e_rel)
        errores_cuad.append(e_cuad)

        # Verificar si el error absoluto es menor que la tolerancia y detener la iteración
        if e_abs < tol:
            break

        x_old = x_new  # Actualizar el valor para la siguiente iteración

    return iteraciones, errores_abs, errores_rel, errores_cuad  # Retornar los resultados

# Definir el punto inicial para el método
x0 = 1.5

# Ejecutar el método de punto fijo con el valor inicial x0
iteraciones, errores_abs, errores_rel, errores_cuad = punto_fijo(x0)

# Imprimir la tabla de iteraciones con los valores calculados
print("Iteración | x_n      | Error absoluto | Error relativo | Error cuadrático")
print("-----------------------------------------------------------------------")
for it in iteraciones:
    print(f"{it[0]:9d} | {it[1]:.6f} | {it[2]:.6e} | {it[3]:.6e} | {it[4]:.6e}")

# Generar valores para la gráfica de la función g(x)
x_vals = np.linspace(-1, 3, 100)  # Generar 100 puntos en el rango [-1, 3]
y_vals = g(x_vals)  # Calcular g(x) para esos valores

# Crear la gráfica de la función g(x) y la línea y = x para visualizar la convergencia
plt.figure(figsize=(8, 5))  # Definir el tamaño de la figura
plt.plot(x_vals, y_vals, label=r"$g(x) = \cos(x)$", color="blue")  # Graficar g(x)
plt.plot(x_vals, x_vals, linestyle="dashed", color="red", label="y = x")  # Graficar y = x

# Graficar los puntos obtenidos en cada iteración
x_points = [it[1] for it in iteraciones]  # Extraer valores x de las iteraciones
y_points = [g(x) for x in x_points]  # Calcular g(x) para esos valores
plt.scatter(x_points, y_points, color="black", zorder=3)  # Dibujar los puntos
plt.plot(x_points, y_points, linestyle="dotted", color="black", label="Iteraciones")  # Conectar los puntos con líneas punteadas

# Etiquetas y formato de la gráfica
plt.xlabel("x")  # Etiqueta del eje x
plt.ylabel("g(x)")  # Etiqueta del eje y
plt.legend()  # Mostrar la leyenda
plt.grid(True)  # Agregar la cuadrícula
plt.title("Método de Punto Fijo")  # Título de la gráfica
plt.savefig("punto_fijo_convergencia.png")  # Guardar la gráfica como imagen
plt.show()  # Mostrar la gráfica

# Graficar la evolución de los errores en cada iteración
plt.figure(figsize=(8, 5))  # Definir el tamaño de la figura
plt.plot(range(1, len(errores_abs) + 1), errores_abs, marker="o", label="Error absoluto")  # Graficar error absoluto
plt.plot(range(1, len(errores_rel) + 1), errores_rel, marker="s", label="Error relativo")  # Graficar error relativo
plt.plot(range(1, len(errores_cuad) + 1), errores_cuad, marker="^", label="Error cuadrático")  # Graficar error cuadrático
plt.xlabel("Iteración")  # Etiqueta del eje x
plt.ylabel("Error")  # Etiqueta del eje y
plt.yscale("log")  # Escala logarítmica para visualizar mejor la disminución de errores
plt.legend()  # Mostrar la leyenda
plt.grid(True)  # Agregar cuadrícula
plt.title("Evolución de los Errores")  # Título de la gráfica

plt.show()  # Mostrar la gráfica
